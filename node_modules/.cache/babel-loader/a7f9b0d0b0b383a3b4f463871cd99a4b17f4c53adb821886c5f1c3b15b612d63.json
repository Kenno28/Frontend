{"ast":null,"code":"// istanbul ignore file -- no coverage, since we would need a running backend for that\n\nimport { fetchWithErrorHandling } from \"./fetchWithErrorHandling\";\nexport let roleOfUser; //Rolle von User\n\nexport async function getAlleProtokolle() {\n  const url = process.env.REACT_APP_API_SERVER_URL + `/api/protokoll/alle`;\n  const response = await fetchWithErrorHandling(url, {\n    credentials: 'include',\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  return await response.json();\n}\nexport async function getAlleEintraege(protokollId) {\n  const url = process.env.REACT_APP_API_SERVER_URL + `/api/protokoll/${protokollId}/eintraege`;\n  const response = await fetchWithErrorHandling(url, {\n    credentials: 'include'\n  });\n  return await response.json();\n}\nexport async function getProtokoll(protokollId) {\n  const url = process.env.REACT_APP_API_SERVER_URL + `/api/protokoll/${protokollId}`;\n  const response = await fetchWithErrorHandling(url, {\n    credentials: 'include'\n  });\n  return await response.json();\n}\nexport async function getEintrag(eintragID) {\n  const url = process.env.REACT_APP_API_SERVER_URL + `/api/eintrag/${eintragID}`;\n  const response = await fetchWithErrorHandling(url, {\n    credentials: 'include'\n  });\n  return await response.json();\n}\nexport async function getLogin(name, password) {\n  const url = process.env.REACT_APP_API_SERVER_URL + `/api/login/`;\n  const response = await fetchWithErrorHandling(url, {\n    method: \"POST\",\n    body: JSON.stringify({\n      name,\n      password\n    }),\n    credentials: \"include\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const responseData = await response.json();\n  if (responseData) {\n    roleOfUser = responseData.role;\n  }\n  return responseData;\n}\nexport async function checkLoginStatus() {\n  const url = process.env.REACT_APP_API_SERVER_URL + `/api/login/`;\n  const response = await fetchWithErrorHandling(url, {\n    credentials: 'include',\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const responseData = await response.json();\n  if (responseData) {\n    roleOfUser = responseData.role;\n  }\n  return responseData;\n}\nexport async function logout() {\n  const url = process.env.REACT_APP_API_SERVER_URL + `/api/login/`;\n  await fetchWithErrorHandling(url, {\n    method: \"DELETE\",\n    credentials: 'include'\n  });\n}\nexport async function createProtokollAPI(protokoll, id) {\n  const url = process.env.REACT_APP_API_SERVER_URL + `/api/protokoll/`;\n  const response = await fetchWithErrorHandling(url, {\n    method: \"POST\",\n    credentials: 'include',\n    body: JSON.stringify({\n      patient: protokoll.patient,\n      datum: protokoll.datum,\n      ersteller: id,\n      public: protokoll.public,\n      closed: protokoll.closed\n    }),\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const responseData = await response.json();\n  return responseData;\n}\nexport async function deleteProtokollAPI(protokollID) {\n  const url = process.env.REACT_APP_API_SERVER_URL + `/api/protokoll/${protokollID}`;\n  const response = await fetchWithErrorHandling(url, {\n    method: \"DELETE\",\n    credentials: 'include'\n  });\n  return response.status;\n}\nexport async function updateProtokollAPI(pro) {\n  console.log(\"CLOSED2 \", pro.closed);\n  const url = process.env.REACT_APP_API_SERVER_URL + `/api/protokoll/${pro.id}`;\n  const response = await fetchWithErrorHandling(url, {\n    method: \"PUT\",\n    body: JSON.stringify({\n      id: pro.id,\n      patient: pro.patient,\n      datum: pro.datum,\n      public: pro.public,\n      closed: pro.closed,\n      ersteller: pro.ersteller\n    }),\n    credentials: 'include',\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  return await response.json();\n}","map":{"version":3,"names":["fetchWithErrorHandling","roleOfUser","getAlleProtokolle","url","process","env","REACT_APP_API_SERVER_URL","response","credentials","headers","Accept","json","getAlleEintraege","protokollId","getProtokoll","getEintrag","eintragID","getLogin","name","password","method","body","JSON","stringify","responseData","role","checkLoginStatus","logout","createProtokollAPI","protokoll","id","patient","datum","ersteller","public","closed","deleteProtokollAPI","protokollID","status","updateProtokollAPI","pro","console","log"],"sources":["/Users/melisazor/Desktop/Dropbox/Semester 3/Web II/we2.blatt12/src/backend/api.ts"],"sourcesContent":["// istanbul ignore file -- no coverage, since we would need a running backend for that\n\nimport { EintragResource, LoginResource, ProtokollResource } from \"../Resources\";\nimport { fetchWithErrorHandling } from \"./fetchWithErrorHandling\";\n\n\nexport let roleOfUser: String ; //Rolle von User\n\n\nexport async function getAlleProtokolle(): Promise<ProtokollResource[]> {\n\n        const url = process.env.REACT_APP_API_SERVER_URL + `/api/protokoll/alle`;\n        const response = await fetchWithErrorHandling(url,{\n        credentials: 'include' as RequestCredentials,\n        headers:{\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n        } })\n        return await response.json();\n    \n}\n\nexport async function getAlleEintraege(protokollId: string): Promise<EintragResource[]> {\n        const url = process.env.REACT_APP_API_SERVER_URL + `/api/protokoll/${protokollId}/eintraege`;\n        const response = await fetchWithErrorHandling(url,{credentials: 'include' as RequestCredentials})\n        return await response.json();\n    \n}\n\nexport async function getProtokoll(protokollId: string): Promise<ProtokollResource> {\n   \n  \n        const url = process.env.REACT_APP_API_SERVER_URL + `/api/protokoll/${protokollId}`;\n        const response = await fetchWithErrorHandling(url,{credentials: 'include' as RequestCredentials})\n        return await response.json();\n    \n}\n\nexport async function getEintrag(eintragID: string): Promise<EintragResource> {\n   \n\n        const url = process.env.REACT_APP_API_SERVER_URL + `/api/eintrag/${eintragID}`;\n        const response = await fetchWithErrorHandling(url,{credentials: 'include' as RequestCredentials})\n        \n        return await response.json();\n}\n\nexport async function getLogin(name:String, password:String): Promise<LoginResource | false>{\n   \n        const url = process.env.REACT_APP_API_SERVER_URL + `/api/login/`;\n        const response = await fetchWithErrorHandling(url,{\n                method: \"POST\",\n                body: JSON.stringify({name, password}),\n                credentials: \"include\" as RequestCredentials,\n                headers:{\n                        Accept: \"application/json\",\n                        \"Content-Type\": \"application/json\"\n                } \n        })\n        const responseData = await response.json();\n        \n        if(responseData){\n                roleOfUser = responseData.role;\n        }\n   \n        return responseData;\n}\n\nexport async function checkLoginStatus(): Promise<LoginResource | false> {\n        const url = process.env.REACT_APP_API_SERVER_URL + `/api/login/`;\n        const response = await fetchWithErrorHandling(url, {\n            credentials: 'include' as RequestCredentials,\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        const responseData = await response.json();\n\n        if(responseData){\n                roleOfUser = responseData.role;\n        }\n       \n        return responseData;\n}\n\nexport async function logout() {\n        const url = process.env.REACT_APP_API_SERVER_URL + `/api/login/`;\n\n        await fetchWithErrorHandling(url, {\n             method: \"DELETE\",\n            credentials: 'include' as RequestCredentials\n        });\n}\n\n\nexport async function createProtokollAPI(protokoll: ProtokollResource, id: String): Promise<ProtokollResource>{\n    \n        const url = process.env.REACT_APP_API_SERVER_URL + `/api/protokoll/`;\n        const response = await fetchWithErrorHandling(url, {\n                method: \"POST\",\n            credentials: 'include' as RequestCredentials,\n            body:JSON.stringify({patient: protokoll.patient, datum: protokoll.datum, ersteller: id, public: protokoll.public, closed: protokoll.closed}),\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        const responseData = await response.json();\n\n       \n        return responseData;\n}\n\nexport async function deleteProtokollAPI(protokollID:string){\n\n        const url = process.env.REACT_APP_API_SERVER_URL + `/api/protokoll/${protokollID}`;\n        const response = await fetchWithErrorHandling(url, {\n                method: \"DELETE\",\n            credentials: 'include' as RequestCredentials\n        })\n        \n        return response.status;\n}\n\n\nexport async function updateProtokollAPI(pro:ProtokollResource): Promise<ProtokollResource>{\n    \n       \n        \n        console.log(\"CLOSED2 \", pro.closed)\n        const url = process.env.REACT_APP_API_SERVER_URL + `/api/protokoll/${pro.id}`;\n        const response = await fetchWithErrorHandling(url, {\n                method: \"PUT\",\n                body: JSON.stringify({id: pro.id, patient: pro.patient, datum: pro.datum, public: pro.public, closed: pro.closed, ersteller: pro.ersteller}),\n                credentials: 'include' as RequestCredentials,\n                headers: {\n                        Accept: \"application/json\",\n                        \"Content-Type\": \"application/json\"\n                }\n        })\n        \n        return await response.json();\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}