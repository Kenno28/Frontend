{"ast":null,"code":"// istanbul ignore file -- no coverage, since we would need a running backend for that\nimport{fetchWithErrorHandling}from\"./fetchWithErrorHandling\";export let roleOfUser;//Rolle von User\nexport async function getAlleProtokolle(){const url=process.env.REACT_APP_API_SERVER_URL+\"/api/protokoll/alle\";const response=await fetchWithErrorHandling(url,{credentials:'include',headers:{Accept:\"application/json\",\"Content-Type\":\"application/json\"}});return await response.json();}export async function getAlleEintraege(protokollId){const url=process.env.REACT_APP_API_SERVER_URL+\"/api/protokoll/\".concat(protokollId,\"/eintraege\");const response=await fetchWithErrorHandling(url,{credentials:'include'});return await response.json();}export async function getProtokoll(protokollId){const url=process.env.REACT_APP_API_SERVER_URL+\"/api/protokoll/\".concat(protokollId);const response=await fetchWithErrorHandling(url,{credentials:'include'});return await response.json();}export async function getEintrag(eintragID){const url=process.env.REACT_APP_API_SERVER_URL+\"/api/eintrag/\".concat(eintragID);const response=await fetchWithErrorHandling(url,{credentials:'include'});return await response.json();}export async function getLogin(name,password){const url=process.env.REACT_APP_API_SERVER_URL+\"/api/login/\";const response=await fetchWithErrorHandling(url,{method:\"POST\",body:JSON.stringify({name,password}),credentials:\"include\",headers:{Accept:\"application/json\",\"Content-Type\":\"application/json\"}});const responseData=await response.json();if(responseData){roleOfUser=responseData.role;}return responseData;}export async function checkLoginStatus(){const url=process.env.REACT_APP_API_SERVER_URL+\"/api/login/\";const response=await fetchWithErrorHandling(url,{credentials:'include',headers:{Accept:\"application/json\",\"Content-Type\":\"application/json\"}});const responseData=await response.json();if(responseData){roleOfUser=responseData.role;}return responseData;}export async function logout(){const url=process.env.REACT_APP_API_SERVER_URL+\"/api/login/\";await fetchWithErrorHandling(url,{method:\"DELETE\",credentials:'include'});}export async function createProtokollAPI(protokoll,id){const url=process.env.REACT_APP_API_SERVER_URL+\"/api/protokoll/\";const response=await fetchWithErrorHandling(url,{method:\"POST\",credentials:'include',body:JSON.stringify({patient:protokoll.patient,datum:protokoll.datum,ersteller:id,public:protokoll.public,closed:protokoll.closed}),headers:{Accept:\"application/json\",\"Content-Type\":\"application/json\"}});const responseData=await response.json();return responseData;}export async function deleteProtokollAPI(protokollID){const url=process.env.REACT_APP_API_SERVER_URL+\"/api/protokoll/\".concat(protokollID);const response=await fetchWithErrorHandling(url,{method:\"DELETE\",credentials:'include'});return response.status;}export async function updateProtokollAPI(pro){const url=process.env.REACT_APP_API_SERVER_URL+\"/api/protokoll/\".concat(pro.id);const response=await fetchWithErrorHandling(url,{method:\"PUT\",body:JSON.stringify({id:pro.id,patient:pro.patient,datum:pro.datum,public:pro.public,closed:pro.closed,ersteller:pro.ersteller}),credentials:'include',headers:{Accept:\"application/json\",\"Content-Type\":\"application/json\"}});return await response.json();}export async function createEitnrag(ein){const url=process.env.REACT_APP_API_SERVER_URL+\"/api/eintrag/\";const response=await fetchWithErrorHandling(url,{method:\"POST\",body:JSON.stringify(ein),credentials:'include',headers:{Accept:\"application/json\",\"Content-Type\":\"application/json\"}});return await response.json();}export async function deleteEitnrag(eintragString){const url=process.env.REACT_APP_API_SERVER_URL+\"/api/eintrag/\".concat(eintragString);const response=await fetchWithErrorHandling(url,{method:\"DELETE\",credentials:'include'});return response.status;}export async function updateEintragAPI(ein){const url=process.env.REACT_APP_API_SERVER_URL+\"/api/eintrag/\".concat(ein.id);const response=await fetchWithErrorHandling(url,{method:\"PUT\",body:JSON.stringify(ein),credentials:'include',headers:{Accept:\"application/json\",\"Content-Type\":\"application/json\"}});return await response.json();}","map":{"version":3,"names":["fetchWithErrorHandling","roleOfUser","getAlleProtokolle","url","process","env","REACT_APP_API_SERVER_URL","response","credentials","headers","Accept","json","getAlleEintraege","protokollId","concat","getProtokoll","getEintrag","eintragID","getLogin","name","password","method","body","JSON","stringify","responseData","role","checkLoginStatus","logout","createProtokollAPI","protokoll","id","patient","datum","ersteller","public","closed","deleteProtokollAPI","protokollID","status","updateProtokollAPI","pro","createEitnrag","ein","deleteEitnrag","eintragString","updateEintragAPI"],"sources":["C:/Users/erayz/Dropbox/Semester 3/Web II/we2.blatt12/src/backend/api.ts"],"sourcesContent":["// istanbul ignore file -- no coverage, since we would need a running backend for that\n\nimport { EintragResource, LoginResource, ProtokollResource } from \"../Resources\";\nimport { fetchWithErrorHandling } from \"./fetchWithErrorHandling\";\n\n\nexport let roleOfUser: String ; //Rolle von User\n\n\nexport async function getAlleProtokolle(): Promise<ProtokollResource[]> {\n\n        const url = process.env.REACT_APP_API_SERVER_URL + `/api/protokoll/alle`;\n        const response = await fetchWithErrorHandling(url,{\n        credentials: 'include' as RequestCredentials,\n        headers:{\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n        } })\n        return await response.json();\n    \n}\n\nexport async function getAlleEintraege(protokollId: string): Promise<EintragResource[]> {\n        const url = process.env.REACT_APP_API_SERVER_URL + `/api/protokoll/${protokollId}/eintraege`;\n        const response = await fetchWithErrorHandling(url,{credentials: 'include' as RequestCredentials})\n        return await response.json();\n    \n}\n\nexport async function getProtokoll(protokollId: string): Promise<ProtokollResource> {\n   \n  \n        const url = process.env.REACT_APP_API_SERVER_URL + `/api/protokoll/${protokollId}`;\n        const response = await fetchWithErrorHandling(url,{credentials: 'include' as RequestCredentials})\n        return await response.json();\n    \n}\n\nexport async function getEintrag(eintragID: string): Promise<EintragResource> {\n   \n\n        const url = process.env.REACT_APP_API_SERVER_URL + `/api/eintrag/${eintragID}`;\n        const response = await fetchWithErrorHandling(url,{credentials: 'include' as RequestCredentials})\n        \n        return await response.json();\n}\n\nexport async function getLogin(name:String, password:String): Promise<LoginResource | false>{\n   \n        const url = process.env.REACT_APP_API_SERVER_URL + `/api/login/`;\n        const response = await fetchWithErrorHandling(url,{\n                method: \"POST\",\n                body: JSON.stringify({name, password}),\n                credentials: \"include\" as RequestCredentials,\n                headers:{\n                        Accept: \"application/json\",\n                        \"Content-Type\": \"application/json\"\n                } \n        })\n        const responseData = await response.json();\n        \n        if(responseData){\n                roleOfUser = responseData.role;\n        }\n   \n        return responseData;\n}\n\nexport async function checkLoginStatus(): Promise<LoginResource | false> {\n        const url = process.env.REACT_APP_API_SERVER_URL + `/api/login/`;\n        const response = await fetchWithErrorHandling(url, {\n            credentials: 'include' as RequestCredentials,\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        const responseData = await response.json();\n\n        if(responseData){\n                roleOfUser = responseData.role;\n        }\n       \n        return responseData;\n}\n\nexport async function logout() {\n        const url = process.env.REACT_APP_API_SERVER_URL + `/api/login/`;\n\n        await fetchWithErrorHandling(url, {\n             method: \"DELETE\",\n            credentials: 'include' as RequestCredentials\n        });\n}\n\n\nexport async function createProtokollAPI(protokoll: ProtokollResource, id: String): Promise<ProtokollResource>{\n    \n        const url = process.env.REACT_APP_API_SERVER_URL + `/api/protokoll/`;\n        const response = await fetchWithErrorHandling(url, {\n                method: \"POST\",\n            credentials: 'include' as RequestCredentials,\n            body:JSON.stringify({patient: protokoll.patient, datum: protokoll.datum, ersteller: id, public: protokoll.public, closed: protokoll.closed}),\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        const responseData = await response.json();\n\n       \n        return responseData;\n}\n\nexport async function deleteProtokollAPI(protokollID:string){\n\n        const url = process.env.REACT_APP_API_SERVER_URL + `/api/protokoll/${protokollID}`;\n        const response = await fetchWithErrorHandling(url, {\n                method: \"DELETE\",\n            credentials: 'include' as RequestCredentials\n        })\n        \n        return response.status;\n}\n\n\nexport async function updateProtokollAPI(pro:ProtokollResource): Promise<ProtokollResource>{\n        \n        const url = process.env.REACT_APP_API_SERVER_URL + `/api/protokoll/${pro.id}`;\n        const response = await fetchWithErrorHandling(url, {\n                method: \"PUT\",\n                body: JSON.stringify({id: pro.id, patient: pro.patient, datum: pro.datum, public: pro.public, closed: pro.closed, ersteller: pro.ersteller}),\n                credentials: 'include' as RequestCredentials,\n                headers: {\n                        Accept: \"application/json\",\n                        \"Content-Type\": \"application/json\"\n                }\n        })\n        \n        return await response.json();\n}\n\nexport async function createEitnrag(ein: EintragResource): Promise<EintragResource>{\n        \n    \n        const url = process.env.REACT_APP_API_SERVER_URL + `/api/eintrag/`;\n        const response = await fetchWithErrorHandling(url, {\n                method: \"POST\",\n                body: JSON.stringify(ein),\n                credentials: 'include' as RequestCredentials,\n                headers: {\n                        Accept: \"application/json\",\n                        \"Content-Type\": \"application/json\"\n                }\n        })\n        \n        return await response.json();\n}\n\nexport async function deleteEitnrag(eintragString: String){\n        \n    \n        const url = process.env.REACT_APP_API_SERVER_URL + `/api/eintrag/${eintragString}`;\n        const response = await fetchWithErrorHandling(url, {\n                method: \"DELETE\",\n                credentials: 'include' as RequestCredentials,\n        })\n        \n        return response.status;\n}\n\nexport async function updateEintragAPI(ein:EintragResource): Promise<EintragResource>{\n        \n      \n        const url = process.env.REACT_APP_API_SERVER_URL + `/api/eintrag/${ein.id}`;\n        const response = await fetchWithErrorHandling(url, {\n                method: \"PUT\",\n                body: JSON.stringify(ein),\n                credentials: 'include' as RequestCredentials,\n                headers: {\n                        Accept: \"application/json\",\n                        \"Content-Type\": \"application/json\"\n                }\n        })\n        \n        return await response.json();\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}